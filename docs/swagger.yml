openapi: 3.0.0
info:
  title: UniMarket API
  version: 1.0.0
paths:
  /:
    get:
      summary: Root endpoint
      responses:
        '200':
          description: OK

  /signup:
    post:
      summary: User signup
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test
                password:
                  type: string
                  description: Password must contain at least 8 characters, 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character
                  example: aA1!abcd
                email:
                  type: string
                  description: Email address must be from a university domain
                  example: test@example.ac.jp
      responses:
        '201':
          description: User created
          headers:
            Set-Cookie:
              description: Set username
              schema:
                type: string
        '405':
          description: Request method isn't POST
        '400':
          description: Invalid request payload or Missing required fields
        '500':
          description: Internal server error

  
  /signin:
    post:
      summary: User signin
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test
                password:
                  type: string
                  example: aA1!abcd
      responses:
        '200':
          description: User signed in
          headers:
            Set-Cookie:
              description: Set cookies for idToken, accessToken and refreshToken and university
              schema:
                type: string
        '405':
          description: Request method isn't POST
        '400':
          description: Invalid request payload
        '500':
          description: Couldn't load cognito config or Couldn't get university identifier
        '401':
          description: Invalid username or password

  /checkEmail:
    post:
      summary: Check if email address is valid
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verificationCode:
                  type: string  
                  example: "123456"
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Email verified
        '405':
          description: Request method isn't POST
        '400':
          description: Invalid request payload or Missing required fields
        '500':
          description: Couldn't load cognito config or Couldn't verify email
  
  /resendEmail:
    post:
      summary: Resend email verification code
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Email verified
        '405':
          description: Request method isn't POST
        '400':
          description: Invalid request payload or Missing required fields
        '500':
          description: Couldn't load cognito config or Couldn't verify email
  
  /editProduct/{id}:
    put:
      summary: Edit a product's details
      description: Updates the details of an existing product by ID.
      operationId: editProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the product.
                description:
                  type: string
                  description: The description of the product.
                imageURL:
                  type: string
                  description: The URL of the product image.
                price:
                  type: number
                  format: float
                  description: The price of the product.
                category:
                  type: string
                  description: The category of the product.
                status:
                  type: string
                  description: The status of the product.
      responses:
        "204":
          description: No Content - Successfully updated the product.
        "400":
          description: Bad Request - The request was invalid.
        "404":
          description: Not Found - The product was not found.
        "405":
          description: Method Not Allowed - Use PUT method.
        "500":
          description: Internal Server Error - Error updating the product in the database.

  /deleteProduct/{id}:
    delete:
      summary: Delete a product
      description: Deletes a product from the database based on the product ID provided in the URL path.
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the product to delete.
      responses:
        '200':
          description: Product deleted successfully
        '400':
          description: Invalid ID or Product ID is missing
        '404':
          description: No product found with the given ID
        '405':
          description: Invalid request method
        '500':
          description: Error deleting from database or error fetching affected rows

  /getProducts/{searchQuery}:
    get:
      summary: Retrieve products
      description: Retrieves a list of products from the database. Can filter products based on a search query included in the URL path.
      tags:
        - Products
      parameters:
        - in: query
          name: searchQuery
          required: false
          schema:
            type: string
          description: Optional search query to filter products by name or description.
      responses:
        '200':
          description: A list of products successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '405':
          description: Invalid request method
        '500':
          description: Internal server error
  
  /addProduct:
    post:
      summary: Add a new product
      description: Adds a new product to the database with the information provided in the request body.
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - name
                - description
                - image_url
                - price
                - category_id
                - status
              properties:
                user_id:
                  type: string
                  format: int64
                  description: The ID of the user who owns the product.
                name:
                  type: string
                  description: The name of the product.
                description:
                  type: string
                  description: The description of the product.
                image_url:
                  type: string
                  description: The URL of the product's image.
                price:
                  type: number
                  format: float
                  description: The price of the product.
                category_id:
                  type: string
                  description: The category ID of the product.
                status:
                  type: string
                  description: The status of the product.

      responses:
        '201':
          description: Product added successfully
        '400':
          description: Invalid request body
        '405':
          description: Invalid request method
        '500':
          description: Error inserting into database

components:
  parameters:
    idToken:
      name: idToken
      in: cookie
      required: true
      schema:
        type: string
    accessToken:
      name: accessToken
      in: cookie
      required: true
      schema:
        type: string
    refreshToken:
      name: refreshToken
      in: cookie
      required: true
      schema:
        type: string
    username:
      name: username
      in: cookie
      required: true
      schema:
        type: string
    university:
      name: university
      in: cookie
      required: true
      schema:
        type: string

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The product ID.
        user_id:
          type: integer
          format: int64
          description: The ID of the user who owns the product.
        name:
          type: string
          description: The name of the product.
        description:
          type: string
          description: The description of the product.
        image_url:
          type: string
          description: The URL of the product's image.
        price:
          type: number
          format: float
          description: The price of the product.
        category:
          type: string
          description: The category of the product.
        status:
          type: string
          description: The status of the product.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the product was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the product was last updated.